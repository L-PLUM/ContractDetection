<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Rules>
    <Rule>
        <RuleId>solidity_integer_multiplication_overflow</RuleId>
        <Patterns>
            <Pattern patternId="mul101">
                <!-- Looks for "like uint256 c=a*b;a or b is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="] and expression/expression[1]/variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[1]/variableDeclaration/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//primaryExpression/identifier)]
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression/primaryExpression/identifier)]
                    ]
                    | expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[1]/variableDeclaration/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression/primaryExpression/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]//expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="mul102">
                <!-- Looks for "like uint256 c; c=a*b;a or b is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition/returnsParameters/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    [not(ancestor::functionDefinition/identifier[text()[1]=(ancestor::contractDefinition/identifier)])]
                    [not(ancestor::functionDefinition[text()[1]= "constructor"])]
                    [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[1]/primaryExpression/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//primaryExpression/identifier)]
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression/primaryExpression/identifier)]
                    ]
                    | expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[1]/primaryExpression/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression/primaryExpression/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression/primaryExpression/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]//expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="mul103">
                <!-- Looks for "like uint newTokens = msg.value * PRESALE_PRICE/getprice();". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="] and expression/expression[1]/variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]
                    ]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[1]/variableDeclaration/identifier)]
                    and expression/expression[2]/environmentalVariable[text()[1]= "msg.value"]
                    and expression//identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    ]
                    | expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[1]/variableDeclaration/identifier)]
                    and expression/expression[2]//identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    and expression/environmentalVariable[text()[1]= "msg.value"]
                    ])
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/environmentalVariable[text()[1]= "msg.value"]
                    and expression/expression[1]/expression//identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    and expression/expression[2]/environmentalVariable[text()[1]= "msg.value"]
                    and expression//identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    ]
                    | expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/environmentalVariable[text()[1]= "msg.value"]
                    and expression/expression[1]/expression//identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    and expression/expression[2]//identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    and expression/environmentalVariable[text()[1]= "msg.value"]
                    ])
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]//expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                    and functionCall/callArguments/tupleExpression/expression/environmentalVariable[text()[1]= "msg.value"]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="mul104">
                <!-- Looks for "like uint newTokens; newTokens= msg.value * PRESALE_PRICE/getprice();". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]
                    ]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[1]/primaryExpression/identifier)]
                    and expression/expression[2]/environmentalVariable[text()[1]= "msg.value"]
                    and expression//identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    ]
                    | expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[1]/primaryExpression/identifier)]
                    and expression/expression[2]//identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    and expression/environmentalVariable[text()[1]= "msg.value"]
                    ])
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/environmentalVariable[text()[1]= "msg.value"]
                    and expression/expression[1]/expression//identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    and expression/expression[2]/environmentalVariable[text()[1]= "msg.value"]
                    and expression//identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    ]
                    | expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/environmentalVariable[text()[1]= "msg.value"]
                    and expression/expression[1]/expression//identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    and expression/expression[2]//identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                    and expression/environmentalVariable[text()[1]= "msg.value"]
                    ])
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]//expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                    and functionCall/callArguments/tupleExpression/expression/environmentalVariable[text()[1]= "msg.value"]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="mul105">
                <!-- Looks for "like require(this.balance >= amount * sellPrice);amount is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "require"]]
                    [callArguments/tupleExpression[expression[text()[1] = "&gt;="]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[1][matches(text()[1],"^.balance$")]
                    and expression/expression[1]/expression[1][environmentalVariable[text()[1]="this"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[text()[1]="address"]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)
                    or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier) and (text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier) and (text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[muldivOperator/mulOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="mul106">
                <!-- Looks for "like require( amount * sellPrice<= this.balance);amount is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "require"]]
                    [callArguments/tupleExpression[expression[text()[1] = "&lt;="]
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[2][matches(text()[1],"^.balance$")]
                    and expression/expression[2]/expression[1][environmentalVariable[text()[1]="this"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[text()[1]="address"]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)
                    or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier) and (text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier) and (text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[muldivOperator/mulOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="mul107">
                <!-- Looks for "like require(tokenLimit >= amount * sellPrice);amount is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "require"]]
                    [callArguments/tupleExpression[expression[text()[1] = "&gt;="]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier) and (text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier) and (text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[muldivOperator/mulOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="mul108">
                <!-- Looks for "like require( amount * sellPrice<= tokenLimit); amount is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "require"]]
                    [callArguments/tupleExpression[expression[text()[1] = "&lt;="]
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier) and (text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier) and (text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[muldivOperator/mulOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="mul109">
                <!-- Looks for "like amount *= mintedAmount; mintedAmount is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/mulLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier) and (text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier) and (text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/mulLvalueOperator]/expression[1]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="mul110">
                <!-- Looks for "like balanceOf[target] *= mintedAmount; mintedAmount is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/mulLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[1]/expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/expression[1]/primaryExpression/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/expression[2]/primaryExpression/identifier)]
                    ]
                    | expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[1]/expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/preceding-sibling::expression[1]/expression/expression[1]/primaryExpression/identifier)]
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression[1]/expression/expression[2]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/mulLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/mulLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="mul111">
                <!-- Looks for "like balanceOf[msg.sender] *= mintedAmount; mintedAmount is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/mulLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[1]/expression/expression[2]/environmentalVariable[text()="msg.sender"]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/expression[1]/primaryExpression/identifier)]
                    and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]
                    | expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[1]/expression/expression[2]/environmentalVariable[text()="msg.sender"]
                    and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/preceding-sibling::expression[1]/expression/expression[1]/primaryExpression/identifier)]
                    and expression/expression[2]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/mulLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="mul112">
                <!-- Looks for "like allowance[msg.sender][target] *= mintedAmount; mintedAmount is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/mulLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]]
                    ]]
                    [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression/expression[1]/expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[1]/expression/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]
                    | expression[comparison[text()[1] = "=="]
                    and expression/muldivOperator/divOperator
                    and expression/expression[1]/muldivOperator/mulOperator
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression/expression[1]/expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[1]/expression/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression[1]/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression/expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression[1]/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression[1]/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/mulLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/mulLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/mulLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_integer_addition_overflow</RuleId>
        <Patterns>
            <Pattern patternId="add101">
                <!-- Looks for "like uint256 c=a+b;a or b is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1]/variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    [not(ancestor::libraryDefinition/identifier[matches(text()[1],"Math")])]
                    [not(ancestor::contractDefinition/identifier[matches(text()[1],"Math")])]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[1]/variableDeclaration/identifier)]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]/expression/primaryExpression/identifier)]]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[1]/variableDeclaration/identifier)]]
                    [expression//primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]])
                    )]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression//primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or expression[2]//primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                    ]
                    |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression//primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    or expression[1]//primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add102">
                <!-- Looks for "like uint256 c; c=a+b;a or b is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    [not(expression/expression[2]/expression//primaryExpression/identifier[text()[1]=
                    (ancestor:: expressionStatement/expression/expression[1]/primaryExpression/identifier)])]
                    [not(ancestor::functionDefinition/identifier[text()[1]=(ancestor::contractDefinition/identifier)])]
                    [not(ancestor::functionDefinition[text()[1]= "constructor"])]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[1]/primaryExpression/identifier)]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]/expression/primaryExpression/identifier)]]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[1]/primaryExpression/identifier)]]
                    [expression//primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]])
                    )]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression//primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or expression[2]//primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression//primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    or expression[1]//primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add103">
                <!-- Looks for "like uint256 c; c=c+b; b is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add104">
                <!-- Looks for "like balances[_to] = balances[_to]+_value; _value is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    [not(ancestor::functionDefinition/identifier[text()[1] = "transfer" or text()[1] = "transferFrom"])]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier)]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)]
                    )]]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)]
                    )]])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add105">
                <!-- Looks for "like balances[msg.sender] = balances[msg.sender]+ _value; _value is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"])]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"])]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add106">
                <!-- Looks for "like allowed[_to][msg.sender]=allowed[_to][msg.sender]+_value; _value is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]]
                    [expression[expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression[2]/plusminusOperator/plusOperator
                    and expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                    and expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add107">
                <!-- Looks for "like uint newTokens = msg.value * PRICE; uint256 c; c=c+ newTokens;". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    ]
                    [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add108">
                <!-- Looks for "like uint newTokens = msg.value * PRICE; balances[_to] = balances[_to]+ newTokens;". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier)]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)]
                    )]]
                    |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)]
                    )]])
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add109">
                <!-- Looks for "like uint newTokens = msg.value * PRICE; balances[msg.sender] = balances[msg.sender]+ newTokens;". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]
                    [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"])]
                    ]
                    |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"])]
                    ])
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add110">
                <!-- Looks for "like uint newTokens = msg.value * PRICE; allowed[_to][msg.sender]=allowed[_to][msg.sender]+ newTokens;". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression/expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression/expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]
                    [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                    ]
                    |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                    ])
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add111">
                <!-- Looks for "like uint newTokens = _value * PRICE;uint256 c; c=c+ newTokens; _value is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    ]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add112">
                <!-- Looks for "like uint newTokens = _value * PRICE;balances[_to] = balances[_to]+ newTokens; _value is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression/expression[1]/primaryExpression/identifier) and text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression/expression[2]/primaryExpression/identifier) and (text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)]
                    )]]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression/expression[1]/primaryExpression/identifier) and text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression/expression[2]/primaryExpression/identifier) and (text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)]
                    )]])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add113">
                <!-- Looks for "like uint newTokens = _value * PRICE;balances[msg.sender] = balances[msg.sender]+ newTokens; _value is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"])]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"])]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add114">
                <!-- Looks for "like uint newTokens = _value * PRICE;allowed[_to][msg.sender]=allowed[_to][msg.sender]+ newTokens; _value is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression/expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression/expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add115">
                <!-- Looks for "like amount += mintedAmount;  mintedAmount is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/plusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add116">
                <!-- Looks for "like balanceOf[target] += mintedAmount;  mintedAmount is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/plusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition/identifier[text()[1] = "transfer" or text()[1] = "transferFrom"])]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)])]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)])]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add117">
                <!-- Looks for "like balanceOf[msg.sender] += mintedAmount;  mintedAmount is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/plusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"])]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"])]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add118">
                <!-- Looks for "like allowance[msg.sender][target] += mintedAmount; mintedAmount is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/plusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add119">
                <!-- Looks for "like uint newTokens = msg.value * PRICE;amount += newTokens;". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/plusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add120">
                <!-- Looks for "like uint newTokens = msg.value * PRICE;balanceOf[target] += newTokens;". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/plusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    ]]
                    [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)])]
                    ]
                    |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)])]
                    ])
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add121">
                <!-- Looks for "like uint newTokens = msg.value * PRICE;balanceOf[msg.sender] += newTokens;". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/plusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"])]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"])]
                    ])
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add122">
                <!-- Looks for "like uint newTokens = msg.value * PRICE;allowance[msg.sender][target] += newTokens;". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/plusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]]
                    ]]
                    [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                    ])
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add123">
                <!-- Looks for "like uint newTokens = _value * PRICE;amount += newTokens; _value is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/plusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/primaryExpression/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/primaryExpression/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add124">
                <!-- Looks for "like uint newTokens = _value * PRICE;balanceOf[target] += newTokens; _value is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/plusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)])]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)])]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add125">
                <!-- Looks for "like uint newTokens = _value * PRICE;balanceOf[msg.sender] += newTokens; _value is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/plusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"])]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"])]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add126">
                <!-- Looks for "like uint newTokens = _value * PRICE;allowance[msg.sender][target] += newTokens; _value is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/plusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[text()[1]="[" and text()[2]="]"]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add127">
                <!-- Looks for "like require(totalSupply + _value <= tokenLimit; _value is parameter,tokenLimit is var or constant". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "require"]]
                    [callArguments/tupleExpression[expression[text()[1] = "&lt;="]
                    and expression/expression[1]/plusminusOperator/plusOperator
                    and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expressionStatement[expression[text()="="]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and expression/expression[2][text()="."]
                    and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                    and expression/expression[2]/functionCall/functionName/identifier[text()="add"] and expression/expression[2]/functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=(ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add128">
                <!-- Looks for "like require(tokenLimit >=totalSupply + _value; _value is parameter,tokenLimit is var or constant". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "require"]]
                    [callArguments/tupleExpression[expression[text()[1] = "&gt;="]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expressionStatement[expression[text()="="]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and expression/expression[2][text()="."]
                    and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                    and expression/expression[2]/functionCall/functionName/identifier[text()="add"] and expression/expression[2]/functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=(ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add129">
                <!-- Looks for "like require( totalSupply + _value <= this.balance); _value is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "require"]]
                    [callArguments/tupleExpression[expression[text()[1] = "&lt;="]
                    and expression/expression[1]/plusminusOperator/plusOperator
                    and expression/expression[2][matches(text()[1],"^.balance$")]
                    and expression/expression[2]/expression[1][environmentalVariable[text()[1]="this"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[text()[1]="address"]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)
                    or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expressionStatement[expression[text()="="]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and expression/expression[2][text()="."]
                    and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                    and expression/expression[2]/functionCall/functionName/identifier[text()="add"] and expression/expression[2]/functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=(ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add130">
                <!-- Looks for "like require(this.balance >= totalSupply + _value); _value is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "require"]]
                    [callArguments/tupleExpression[expression[text()[1] = "&gt;="]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[1][matches(text()[1],"^.balance$")]
                    and expression/expression[1]/expression[1][environmentalVariable[text()[1]="this"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[text()[1]="address"]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)
                    or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expressionStatement[expression[text()="="]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and expression/expression[2][text()="."]
                    and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                    and expression/expression[2]/functionCall/functionName/identifier[text()="add"] and expression/expression[2]/functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=(ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add131">
                <!-- Looks for "like uint newTokens = _value * PRICE;require(presaleSoldTokens + newTokens <= PRESALE); _value is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "require"]]
                    [callArguments/tupleExpression[expression[text()[1] = "&lt;="]
                    and expression/expression[1]/plusminusOperator/plusOperator
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add132">
                <!-- Looks for "like uint newTokens = _value * PRICE;require(PRESALE>=presaleSoldTokens+newTokens); _value is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "require"]]
                    [callArguments/tupleExpression[expression[text()[1] = "&gt;="]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add133">
                <!-- Looks for "like uint newTokens = _value * PRICE;require( totalSupply + token <= this.balance);  _value is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "require"]]
                    [callArguments/tupleExpression[expression[text()[1] = "&lt;="]
                    and expression/expression[1]/plusminusOperator/plusOperator
                    and expression/expression[2][matches(text()[1],"^.balance$")]
                    and expression/expression[2]/expression[1][environmentalVariable[text()[1]="this"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[text()[1]="address"]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)
                    or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add134">
                <!-- Looks for "like uint newTokens = _value * PRICE;require(this.balance >= totalSupply + token); _value is parameter". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "require"]]
                    [callArguments/tupleExpression[expression[text()[1] = "&gt;="]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[1][matches(text()[1],"^.balance$")]
                    and expression/expression[1]/expression[1][environmentalVariable[text()[1]="this"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[text()[1]="address"]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)
                    or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add135">
                <!-- Looks for "like uint newTokens = msg.value * PRESALE_PRICE;require(presaleSoldTokens + newTokens <= PRESALE_TOKEN_SUPPLY_LIMIT);  PRESALE_TOKEN_SUPPLY_LIMIT is var or constant". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "require"]]
                    [callArguments/tupleExpression[expression[text()[1] = "&lt;="]
                    and expression/expression[1]/plusminusOperator/plusOperator
                    and expression/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    ]]
                    [parent::*/parent::*/parent::*/preceding-sibling::statement//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expressionStatement[expression[text()="="]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and expression/expression[2][text()="."]
                    and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                    and expression/expression[2]/functionCall/functionName/identifier[text()="add"] and expression/expression[2]/functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=(ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add136">
                <!-- Looks for "like uint newTokens = msg.value * PRESALE_PRICE;require(PRESALE_TOKEN_SUPPLY_LIMIT >=presaleSoldTokens + newTokens);  PRESALE_TOKEN_SUPPLY_LIMIT is var or constant". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "require"]]
                    [callArguments/tupleExpression[expression[text()[1] = "&gt;="]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    ]]
                    [parent::*/parent::*/parent::*/preceding-sibling::statement//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expressionStatement[expression[text()="="]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and expression/expression[2][text()="."]
                    and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                    and expression/expression[2]/functionCall/functionName/identifier[text()="add"] and expression/expression[2]/functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=(ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add137">
                <!-- Looks for "like uint newTokens = msg.value * PRESALE_PRICE;require(presaleSoldTokens + newTokens <= this.balance);". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "require"]]
                    [callArguments/tupleExpression[expression[text()[1] = "&lt;="]
                    and expression/expression[1]/plusminusOperator/plusOperator
                    and expression/expression[2][matches(text()[1],"^.balance$")]
                    and expression/expression[2]/expression[1][environmentalVariable[text()[1]="this"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[text()[1]="address"]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)
                    or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    ]]
                    [parent::*/parent::*/parent::*/preceding-sibling::statement//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="add138">
                <!-- Looks for "like uint newTokens = msg.value * PRESALE_PRICE;require(this.balance >=presaleSoldTokens+newTokens);". -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "require"]]
                    [callArguments/tupleExpression[expression[text()[1] = "&gt;="]
                    and expression/expression[2]/plusminusOperator/plusOperator
                    and expression/expression[1][matches(text()[1],"^.balance$")]
                    and expression/expression[1]/expression[1][environmentalVariable[text()[1]="this"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[text()[1]="address"]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)
                    or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    ]]
                    [parent::*/parent::*/parent::*/preceding-sibling::statement//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]
                    ]]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[1][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[2][plusminusOperator/plusOperator
                    and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                    ])
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_integer_subtraction_overflow</RuleId>
        <Patterns>
            <Pattern patternId="sub101">
                <Categories>
                    <!-- Looks for "like uint256 c; c=a-b or like uint256 c=a-b;a or b is parameter". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or
                    primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/plusminusOperator/minusOperator
                    and expression/expression[2]/expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    [not(expression/expression[2]/expression//primaryExpression/identifier[text()[1]=
                    (ancestor:: expressionStatement/expression/expression[1]/primaryExpression/identifier)])]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression//primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression//primaryExpression/identifier)]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]//primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]//expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub102">
                <Categories>
                    <!-- Looks for "like uint256 c; c=c-b; b is parameter". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/plusminusOperator/minusOperator
                    and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    [not(ancestor::functionDefinition/identifier[matches(text()[1],"burn")])]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub103">
                <Categories>
                    <!-- Looks for "like balances[_to] = balances[_to]-_value; _value is parameter". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    and expression/expression[2]/plusminusOperator/minusOperator
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/primaryExpression/identifier) and text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub104">
                <Categories>
                    <!-- Looks for "like balances[msg.sender] = balances[msg.sender]- _value; _value is parameter". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and expression/expression[2]/plusminusOperator/minusOperator
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/primaryExpression/identifier) and text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub105">
                <Categories>
                    <!-- Looks for "like allowed[_to][msg.sender] = allowed[_to][msg.sender]- _value; _value is parameter". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]]
                    [expression[expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression[2]/plusminusOperator/minusOperator
                    and expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                    and expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub106">
                <Categories>
                    <!-- Looks for "like uint newTokens = msg.value * PRICE;  uint256 c; c=c-newTokens; ". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/plusminusOperator/minusOperator
                    and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    ]
                    [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/primaryExpression/identifier) and (text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub107">
                <Categories>
                    <!-- Looks for "like uint newTokens = msg.value * PRICE;  balances[_to] = balances[_to]- newTokens;". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    and expression/expression[2]/plusminusOperator/minusOperator
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/primaryExpression/identifier) and text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub108">
                <Categories>
                    <!-- Looks for "like uint newTokens = msg.value * PRICE; balances[msg.sender] = balances[msg.sender]- newTokens;". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and expression/expression[2]/plusminusOperator/minusOperator
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]
                    [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/primaryExpression/identifier) and text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub109">
                <Categories>
                    <!-- Looks for "like uint newTokens = msg.value * PRICE; allowed[_to][msg.sender] = allowed[_to][msg.sender]- newTokens;". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]]
                    [expression[expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression[2]/plusminusOperator/minusOperator
                    and expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                    and expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub110">
                <Categories>
                    <!-- Looks for "like uint newTokens = _value * PRICE; c=c-newTokens;". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression/expression[2]/plusminusOperator/minusOperator
                    and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    ]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub111">
                <Categories>
                    <!-- Looks for "like uint newTokens = _value * PRICE; balances[_to] = balances[_to]- newTokens;". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    and expression/expression[2]/plusminusOperator/minusOperator
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    ]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/primaryExpression/identifier) and text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub112">
                <Categories>
                    <!-- Looks for "like uint newTokens = _value * PRICE; balances[msg.sender] = balances[msg.sender]- newTokens;". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]
                    and expression/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and expression/expression[2]/plusminusOperator/minusOperator
                    and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                    and expression/expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/primaryExpression/identifier) and text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub113">
                <Categories>
                    <!-- Looks for "like uint newTokens = _value * PRICE; allowed[_to][msg.sender] = allowed[_to][msg.sender]- newTokens;". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement[expression[text()="="]]
                    [expression[expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression[2]/plusminusOperator/minusOperator
                    and expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                    and expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub114">
                <Categories>
                    <!-- Looks for "like _totalSupply -=_amount;  _amount is parameter". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition/identifier[matches(text()[1],"burn")])]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/primaryExpression/identifier)]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub115">
                <Categories>
                    <!-- Looks for "like balances[_spender] -= _amount;  _amount is parameter". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=  (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and
                    expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    ]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                    ])
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub116">
                <Categories>
                    <!-- Looks for "like balances[msg.sender] -= _amount;  _amount is parameter". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[2]/environmentalVariable[text()="msg.sender"]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=  (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    ]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                    ])
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub117">
                <Categories>
                    <!-- Looks for "like allowed[msg.sender][_spender] -= _amount;  _amount is parameter". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier)]]
                    ]]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    ]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                    ])
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub118">
                <Categories>
                    <!-- Looks for "like uint newTokens = msg.value * PRICE; _totalSupply -= newTokens;". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/primaryExpression/identifier)]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub119">
                <Categories>
                    <!-- Looks for "like uint newTokens = msg.value * PRICE; balances[_spender] -= newTokens;". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    ]]
                    [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=  (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and
                    expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    ]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                    ])
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub120">
                <Categories>
                    <!-- Looks for "like uint newTokens = msg.value * PRICE; balances[msg.sender] -= newTokens;". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[2]/environmentalVariable[text()="msg.sender"]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=  (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    ]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                    ])
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub121">
                <Categories>
                    <!-- Looks for "like uint newTokens = msg.value * PRICE; allowed[msg.sender][_spender] -= newTokens;". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier)]]
                    ]]
                    [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                    and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                    and expression/expression[2]/muldivOperator/mulOperator
                    and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                    )]
                    [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    ]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                    (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                    ])
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub122">
                <Categories>
                    <!-- Looks for "like uint newTokens = _value * PRICE; totalSupply -= newTokens;". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/primaryExpression/identifier)]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub123">
                <Categories>
                    <!-- Looks for "like uint newTokens = _value * PRICE; balances[_spender] -= newTokens;". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=  (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and
                    expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    ]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                    ])
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub124">
                <Categories>
                    <!-- Looks for "like uint newTokens = _value * PRICE; balances[msg.sender] -= newTokens;". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[2]/environmentalVariable[text()="msg.sender"]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=  (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    ]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                    ])
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub125">
                <Categories>
                    <!-- Looks for "like uint newTokens = _value * PRICE; allowed[msg.sender][_spender] -= newTokens;". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier)]]
                    ]]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//expression[text()="."]
                    [expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                    and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    )]
                    [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                    |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                    ]
                    [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                    ])
                    )]
                </XPath>
            </Pattern>
            <Pattern patternId="sub126">
                <Categories>
                    <!-- Looks for "like _totalSupply -= 2000 * 10**8; in loop; ". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[2]//primaryExpression/numberLiteral/decimalNumber
                    ]]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]]
                    [expression//primaryExpression/numberLiteral/decimalNumber[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]//primaryExpression/numberLiteral/decimalNumber)]]
                    )]
                    [ancestor::statement/(forStatement|whileStatement|doWhileStatement)/condition/expression/expression[2][text()=".length"]]
                    [ancestor::functionDefinition/parameterList/parameter/typeName[typeName/elementaryTypeName[matches(text()[1],"address")]][text()="[]"]]
                </XPath>
            </Pattern>
            <Pattern patternId="sub127">
                <Categories>
                    <!-- Looks for "likebalances[owner] -= 2000 * 10**8;  in loop; ". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    and expression[2]//primaryExpression/numberLiteral/decimalNumber
                    ]]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))]
                    ]]
                    [expression//primaryExpression/numberLiteral/decimalNumber[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression//primaryExpression/numberLiteral/decimalNumber)]]
                    )]
                    [ancestor::statement/(forStatement|whileStatement|doWhileStatement)/condition/expression/expression[2][text()=".length"]]
                    [ancestor::functionDefinition/parameterList/parameter/typeName[typeName/elementaryTypeName[matches(text()[1],"address")]][text()="[]"]]
                </XPath>
            </Pattern>
            <Pattern patternId="sub128">
                <Categories>
                    <!-- Looks for "like balances[msg.sender] -= 2000 * 10**8; in loop; ". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and expression[2]//primaryExpression/numberLiteral/decimalNumber
                    ]]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression//primaryExpression/numberLiteral/decimalNumber[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression//primaryExpression/numberLiteral/decimalNumber)]]
                    )]
                    [ancestor::statement/(forStatement|whileStatement|doWhileStatement)/condition/expression/expression[2][text()=".length"]]
                    [ancestor::functionDefinition/parameterList/parameter/typeName[typeName/elementaryTypeName[matches(text()[1],"address")]][text()="[]"]]
                </XPath>
            </Pattern>
            <Pattern patternId="sub129">
                <Categories>
                    <!-- Looks for "like allowed[owner][msg.sender] -= 2000 * 10**8; in loop; ". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier)]]
                    and expression[2]//primaryExpression/numberLiteral/decimalNumber
                    ]]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression//primaryExpression/numberLiteral/decimalNumber[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression//primaryExpression/numberLiteral/decimalNumber)]]
                    )]
                    [ancestor::statement/(forStatement|whileStatement|doWhileStatement)/condition/expression/expression[2][text()=".length"]]
                    [ancestor::functionDefinition/parameterList/parameter/typeName[typeName/elementaryTypeName[matches(text()[1],"address")]][text()="[]"]]
                </XPath>
            </Pattern>
            <Pattern patternId="sub130">
                <Categories>
                    <!-- Looks for "like _totalSupply -= TOTAL; in loop; ". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")] and constantType[text()="constant"]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier) and text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")] and constantType[text()="constant"]]/identifier)]]
                    )]
                    [ancestor::statement/(forStatement|whileStatement|doWhileStatement)/condition/expression/expression[2][text()=".length"]]
                    [ancestor::functionDefinition/parameterList/parameter/typeName[typeName/elementaryTypeName[matches(text()[1],"address")]][text()="[]"]]
                </XPath>
            </Pattern>
            <Pattern patternId="sub131">
                <Categories>
                    <!-- Looks for "like balances[owner] -= TOTAL; in loop; ". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")] and constantType[text()="constant"]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression/primaryExpression/identifier) and text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")] and constantType[text()="constant"]]/identifier)]]
                    )]
                    [ancestor::statement/(forStatement|whileStatement|doWhileStatement)/condition/expression/expression[2][text()=".length"]]
                    [ancestor::functionDefinition/parameterList/parameter/typeName[typeName/elementaryTypeName[matches(text()[1],"address")]][text()="[]"]]
                </XPath>
            </Pattern>
            <Pattern patternId="sub132">
                <Categories>
                    <!-- Looks for "like balances[msg.sender] -= TOTAL; in loop; ". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                    and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                    and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")] and constantType[text()="constant"]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[2]/environmentalVariable[text()="msg.sender"]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression/primaryExpression/identifier) and text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")] and constantType[text()="constant"]]/identifier)]]
                    )]
                    [ancestor::statement/(forStatement|whileStatement|doWhileStatement)/condition/expression/expression[2][text()=".length"]]
                    [ancestor::functionDefinition/parameterList/parameter/typeName[typeName/elementaryTypeName[matches(text()[1],"address")]][text()="[]"]]
                </XPath>
            </Pattern>
            <Pattern patternId="sub133">
                <Categories>
                    <!-- Looks for "like allowed[owner][msg.sender] -= TOTAL; in loop; ". -->
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //expressionStatement
                    [expression[lvalueOperator/minusLvalueOperator
                    and expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                    and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                    and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier)]]
                    and expression[2]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")] and constantType[text()="constant"]]/identifier)]
                    ]]
                    [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                    [expression[text()[1]="[" and text()[2]="]"]]
                    [expression[expression[1][text()[1]="[" and text()[2]="]"]
                    and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                    and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                    and expression[2][primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                    ]]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression/primaryExpression/identifier) and text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")] and constantType[text()="constant"]]/identifier)]]
                    )]
                    [ancestor::statement/(forStatement|whileStatement|doWhileStatement)/condition/expression/expression[2][text()=".length"]]
                    [ancestor::functionDefinition/parameterList/parameter/typeName[typeName/elementaryTypeName[matches(text()[1],"address")]][text()="[]"]]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_uint_cant_be_negative</RuleId>
        <Patterns>
            <!-- Looks for construction: "for (...; i >= 0; ...) { ... }", "while(i >= 0) {}", "do {} while(i >= 0)", where variable i is of type uint*. -->
            <Pattern patternId="ucn101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <TruePositiveRate>3</TruePositiveRate>
                <XPath>
                    //statement/(forStatement|whileStatement|doWhileStatement)/condition
                    /expression[text()[1]=">="]
                    [expression[2]/primaryExpression//decimalNumber[text()[1]="0"]]
                    [expression[1]/primaryExpression/identifier
                    [text()[1]=(ancestor::functionDefinition//variableDeclaration
                    [typeName/elementaryTypeName[matches(text()[1],"uint")]]/identifier)]]
                </XPath>
            </Pattern>
            <!-- Looks for construction: "...>=0" for uint variables and structure's members of uint type-->
            <Pattern patternId="ucn102">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <TruePositiveRate>3</TruePositiveRate>
                <XPath>
                    //expression[text()[1]=">="]
                    [expression[2]/primaryExpression//decimalNumber[text()[1]="0"]]
                    [expression[1]/primaryExpression/identifier
                    [text()[1]=(ancestor::functionDefinition//variableDeclaration
                    [typeName/elementaryTypeName[matches(text()[1],"uint")]]/identifier)
                    or text()[1]=(ancestor::contractDefinition//stateVariableDeclaration
                    [typeName/elementaryTypeName[matches(text()[1],"uint")]]/identifier)
                    or text()[1]=(ancestor::contractDefinition//structDefinition/variableDeclaration
                    [typeName/elementaryTypeName[matches(text()[1],"uint")]]/identifier)]]
                    |
                    //expression[text()[1]=">="]
                    [expression[2]/primaryExpression//decimalNumber[text()[1]="0"]]
                    [expression[1]/identifier
                    [text()[1]=(ancestor::contractDefinition//structDefinition/variableDeclaration
                    [typeName/elementaryTypeName[matches(text()[1],"uint")]]/identifier)]]
                </XPath>
            </Pattern>
            <!-- Looks for construction: "...>=0" only for mappings of type: (...=>uint). -->
            <Pattern patternId="ucn103">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <TruePositiveRate>3</TruePositiveRate>
                <XPath>
                    //expression[text()[1]=">="]
                    [expression[2]//decimalNumber[text()[1]="0"]]
                    [expression[1]/expression[1]//identifier
                    [text()[1]=(ancestor::contractDefinition//stateVariableDeclaration
                    [typeName/mappingSt/typeName[2]/elementaryTypeName[matches(text()[1],"uint")]]
                    /identifier)]]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_var_in_for_overflow</RuleId>
        <Patterns>
            <!-- Looks for construction: "for (var ...; ... <number bigger than 255>; ... ++)". -->
            <Pattern patternId="vil101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <TruePositiveRate>3</TruePositiveRate>
                <XPath>//forStatement[expression[1]/varDeclaration]
                    [condition/expression/expression/primaryExpression[numberLiteral/decimalNumber[matches(text()[1],"^[0-9]+$")]&gt; 255]]
                    [expression[2]/twoPlusMinusOperator/incrementOperator]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_reentrancy</RuleId>
        <Patterns>
            <!-- Looks for low-level call() without data and gas limit，changing value after calling. -->
            <Pattern patternId="ree101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1]="call"]]
                    [not(callArguments//expression)]
                    [not(gas/expression)]
                    [parent::*/parent::*/parent::*/following-sibling::statement/expressionStatement[expression[text()[1]="="]
                    or expression/lvalueOperator/minusLvalueOperator]]
                </XPath>
            </Pattern>
            <!-- Looks for low-level call() with empty data ("") and without gas limit, changing value after calling. -->
            <Pattern patternId="ree102">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1]="call"]]
                    [callArguments//stringLiteral[string-length(text())=0]]
                    [callArguments/tupleExpression[count(expression)=1]]
                    [not(gas/expression)]
                    [parent::*/parent::*/parent::*/following-sibling::statement/expressionStatement[expression[text()[1]="="]
                    or expression/lvalueOperator/minusLvalueOperator]]
                </XPath>
            </Pattern>
            <!-- Looks for low-level call() without data and gas limit，changing value after calling. -->
            <Pattern patternId="ree103">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1]="call"]]
                    [not(callArguments//expression)]
                    [not(gas/expression)]
                    [parent::*/parent::*/following-sibling::statement//expressionStatement[expression[text()[1]="="]
                    or expression/lvalueOperator/minusLvalueOperator]]
                </XPath>
            </Pattern>
            <!-- Looks for low-level call() with empty data ("") and without gas limit, changing value after calling. -->
            <Pattern patternId="ree104">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1]="call"]]
                    [callArguments//stringLiteral[string-length(text())=0]]
                    [callArguments/tupleExpression[count(expression)=1]]
                    [not(gas/expression)]
                    [parent::*/parent::*/following-sibling::statement//expressionStatement[expression[text()[1]="="]
                    or expression/lvalueOperator/minusLvalueOperator]]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_super_power_manager</RuleId>
        <Patterns>
            <!-- Looks for functions: only have onlyOwner modifier or compare with a special address. -->
            <Pattern patternId="spm101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionDefinition
                    [identifier[matches(text()[1],"^onlyOwner|^isOwner")]
                    or descendant::expression[comparison[text()[1] = "=="]]
                    [expression/environmentalVariable[text()[1] = "msg.sender"]]
                    [expression/primaryExpression/identifier[text()[1] =
                    ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1] = "address"]]/identifier/text()]]
                    ]
                    [descendant::expressionStatement/expression[comparison[text()[1] = "=="]]
                    [expression/primaryExpression/booleanLiteral[text()[1] = "true"]]
                    ]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_gasless_send</RuleId>
        <Patterns>
            <!-- Looks for using of send function in the following cases: if (<addr>.send()){revert() or throw}, and require or assert with send as an argument. -->
            <Pattern patternId="sen101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1]="send"]]
                    [ancestor::ifStatement/statement/block/statement/throwRevertStatement or
                    ancestor::functionCall/functionName/identifier[matches(text()[1],"require|assert")]]
                    [(ancestor::statement/following-sibling::statement/expressionStatement/expression[text()[1]="="])]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_gaslimit_transfer_in_loops</RuleId>
        <Patterns>
            <!-- Looks for "for" cycle, which accesses ".length" ,transfer . -->
            <Pattern patternId="for101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //forStatement
                    [condition//expression[matches(text()[1],"^.length$")]
                    or condition//expression[2]//identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[text()[1]="="][expression[text()[1]=".length"]]/identifier)
                    or text()[1]=(ancestor::functionDefinition//expression[text()[1]="="][expression[2][text()[1]=".length"]]/expression[1]//identifier)]
                    ]
                    [descendant::functionCall
                    [functionName/identifier[matches(text()[1],"transfer|withdraw")]]
                    ]
                </XPath>
            </Pattern>
            <!-- Looks for "while" cycle, which accesses ".length" ,transfer . -->
            <Pattern patternId="whi101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //whileStatement
                    [condition//expression[matches(text()[1],"^.length$")]
                    or condition//expression[2]//identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[text()[1]="="][expression[text()[1]=".length"]]/identifier)
                    or text()[1]=(ancestor::functionDefinition//expression[text()[1]="="][expression[2][text()[1]=".length"]]/expression[1]//identifier)]
                    ]
                    [descendant::functionCall
                    [functionName/identifier[matches(text()[1],"transfer|withdraw")]]
                    ]
                </XPath>
            </Pattern>
            <!-- Looks for "do while" cycle, which accesses ".length" ,transfer . -->
            <Pattern patternId="dow101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //doWhileStatement
                    [condition//expression[matches(text()[1],"^.length$")]
                    or condition//expression[2]//identifier[text()[1]=
                    (ancestor::functionDefinition//variableDeclaration[text()[1]="="][expression[text()[1]=".length"]]/identifier)
                    or text()[1]=(ancestor::functionDefinition//expression[text()[1]="="][expression[2][text()[1]=".length"]]/expression[1]//identifier)]
                    ]
                    [descendant::functionCall
                    [functionName/identifier[matches(text()[1],"transfer|withdraw")]]
                    ]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_use_tx_origin</RuleId>
        <Patterns>
            <!-- Looks for tx.origin occurrence. -->
            <Pattern patternId="txo101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>//environmentalVariable[matches(text()[1],"^tx.origin$")]/parent::*[parent::*[not(comparison
                    and expression/environmentalVariable[matches(text()[1],"^msg.sender$")])]]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_unrestricted_write_operation</RuleId>
        <Patterns>
            <!-- Looks for functions with input parameter(s), named like "set*" or "init*" or "freeze*", that don't have onlyOwner() modifier or compare msg.sender to some specific address.-->
            <Pattern patternId="uwo101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>
                    //functionDefinition
                    [identifier[matches(text()[1],"^set|^init|^change")]]
                    [parameterList/parameter]
                    [descendant::expression[text()[1]="="]/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter/identifier)]]
                    [not(descendant::identifier[text()[1]=(ancestor::sourceUnit//modifierDefinition/identifier)]
                    or descendant::expression[comparison[text()[1]="=="]]
                    [expression/environmentalVariable[text()[1]="msg.sender"]]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                    )]
                    [not(identifier[matches(text()[1],"^only|^is")])]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_unprivileged_suicide</RuleId>
        <Patterns>
            <!-- Looks for functions with input parameter(s), that have "selfdestruct" or "suicide",don't have onlyOwner() modifier or compare msg.sender to some specific address.-->
            <Pattern patternId="unp101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>
                    //functionDefinition
                    [parameterList/parameter/typeName/elementaryTypeName[text()[1]="address"]]
                    [descendant::functionCall[functionName/identifier[matches(text()[1],"^suicide|selfdestruct$")]]
                    [callArguments//expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition/parameterList/parameter/identifier)]]]
                    [not(identifier[text()[1]="onlyOwner"] or identifier[text()[1]="onlyOwner()"]
                    or descendant::expression[comparison[text()[1]="=="]]
                    [expression/environmentalVariable[text()[1]="msg.sender"]]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::contractDefinition//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                    )]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_unchecked_call_return_value</RuleId>
        <Patterns>
            <!-- Looks for cases, when function calls delegatecall, send, callcode, call do not have ancestors: if, require, assert, return and function call is not a part of variable declaration. -->
            <Pattern patternId="exc101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionCall
                    [parent::expression[text()[1] = "."]]
                    [functionName//identifier[matches(text()[1],"^call$|^delegatecall$|^send$|^callcode$|^staticcall$")]
                    and not(ancestor::ifStatement)
                    and not(ancestor::returnStatement)
                    and not(ancestor::functionCall)
                    and not(ancestor::variableDeclarationStatement)
                    and not(ancestor::expression and ancestor::expression[text()[1] = "=" or lvalueOperator])
                    ]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_locked_ether</RuleId>
        <Patterns>
            <!-- Looks for situations, where there is a payable function in the contract, however there is no "suicide", "selfdestruct", "transfer", "send", or ".value". -->
            <Pattern patternId="let101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //contractDefinition
                    [descendant::functionDefinition/block or descendant::functionFallBackDefinition/block]
                    [contractPartDefinition[functionDefinition/stateMutability/payableType or functionFallBackDefinition/stateMutability/payableType]]
                    [not(contractPartDefinition/(functionDefinition|functionFallBackDefinition)/block//functionCall/functionName//identifier[matches(text()[1],"^suicide$|^selfdestruct$")])]
                    [not(contractPartDefinition/(functionDefinition|functionFallBackDefinition)/block//functionCall/functionName//identifier[matches(text()[1],"transfer|Transfer|send|^delegatecall$")])]
                    [not(contractPartDefinition/(functionDefinition|functionFallBackDefinition)/block//functionCall/value)]
                    [not(descendant::functionDefinition/identifier[matches(text()[1],"^transfer|^withdraw|^send")])]
                    [not(descendant::functionDefinition//emitEventStatement/identifier[matches(text()[1],"^Transfer|^Withdraw|^Send")])]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_misuse_blockhash</RuleId>
        <Patterns>
            <!-- Looks for incorrect use of blockhash: blockhash(<number>), blockhash(block.number). -->
            <Pattern patternId="blo101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>
                    //environmentalVariable
                    [matches(text()[1], "^block\.blockhash\($|^blockhash\($")]
                    /expression
                    [ primaryExpression/numberLiteral/decimalNumber
                    or environmentalVariable[text()[1] = "block.number"]
                    or (expression[1]/environmentalVariable[text()[1] = "block.number"]
                    and plusminusOperator
                    and expression[2]/primaryExpression/numberLiteral/decimalNumber
                    [text()[1] > 256]
                    )]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_timestamp_dependency</RuleId>
        <Patterns>
            <!-- Looks for expression that contains "==" or "!=" and "block.timestamp" or "now", except for cases when timestamp is a function argument. -->
            <Pattern patternId="tim101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>
                    //expression
                    [comparison]
                    [expression//environmentalVariable
                    [matches(text()[1],"^block.timestamp|now$")]
                    [not(ancestor::*[4][self::functionCall])]]
                </XPath>
            </Pattern>
            <!-- Looks for expression that contains "<" or "<=" or ">" or ">=" and "block.timestamp" or "now", except for cases when timestamp is a function argument. -->
            <Pattern patternId="tim102">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>
                    //expression
                    [matches(text()[1],"&lt;|&gt;|&lt;=|&gt;=")]
                    [expression//environmentalVariable
                    [matches(text()[1],"^block.timestamp|now$")]
                    [not(ancestor::*[4][self::functionCall])]]
                    [expression/expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement[expression[text()[1]="="]/expression[environmentalVariable
                    [matches(text()[1],"^block.timestamp|now$")] or primaryExpression/numberLiteral/decimalNumber]]/expression//identifier)
                    or text()[1]=(ancestor::sourceUnit//stateVariableDeclaration[text()[1]="=" and expression[environmentalVariable
                    [matches(text()[1],"^block.timestamp|now$")] or primaryExpression/numberLiteral/decimalNumber]]/identifier)
                    ]]

                </XPath>
            </Pattern>
            <!-- Looks for expression that contains "<" or "<=" or ">" or ">=" and "block.timestamp" or "now", except for cases when timestamp is a function argument. -->
            <Pattern patternId="tim103">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>
                    //expression
                    [matches(text()[1],"&lt;|&gt;|&lt;=|&gt;=")]
                    [expression//environmentalVariable
                    [matches(text()[1],"^block.timestamp|now$")]
                    [not(ancestor::*[4][self::functionCall])]]
                    [expression/primaryExpression/identifier[text()[1]=
                    (ancestor::functionDefinition//expressionStatement[expression[text()[1]="="]/expression[environmentalVariable
                    [matches(text()[1],"^block.timestamp|now$")] or primaryExpression/numberLiteral/decimalNumber]]/expression//identifier)
                    or text()[1]=(ancestor::sourceUnit//stateVariableDeclaration[text()[1]="=" and expression[environmentalVariable
                    [matches(text()[1],"^block.timestamp|now$")] or primaryExpression/numberLiteral/decimalNumber]]/identifier)
                    ]]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_div_before_mul</RuleId>
        <Patterns>
            <!-- Looks for arithmetic expressions with division before multiplication, including those using SafeMath library. -->
            <Pattern patternId="dbm101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>
                    //expression
                    [muldivOperator/mulOperator or
                    functionCall/functionName/identifier[text()[1]='mul']]
                    [descendant::divOperator or
                    descendant::functionCall/functionName/identifier[text()[1]='div']]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_keeping_secrets</RuleId>
        <Patterns>
            <!-- Looks for state variables with private visibility type. -->
            <Pattern patternId="pri101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>
                    //stateVariableDeclaration
                    [visibleType[text()[1]="private"]
                    and identifier[text()[1]=
                    (ancestor::contractDefinition/contractPartDefinition[functionDefinition[text()[1]="function"]
                    and functionDefinition/identifier[not(text()[1]=(ancestor::contractDefinition/identifier))]
                    and functionDefinition//expressionStatement/expression[text()[1]="="]]//expressionStatement/expression/expression[1]/primaryExpression/identifier)
                    and text()[1]=
                    (ancestor::contractDefinition/contractPartDefinition/functionDefinition//functionCall/callArguments/tupleExpression/expression[1]/expression[1]/primaryExpression/identifier)
                    ]]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_call_to_the_unknown</RuleId>
        <Patterns>
            <!-- Looks for construction: call unknown contract, like" RPT constant token = RPT(0xC0e6737A29DE7a00e2f6011924eB257106CB082f),token..." in stateVariableDeclaration. -->
            <Pattern patternId="unk101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //stateVariableDeclaration//functionCall//hexNumber[string-length()=42]
                    [(ancestor::stateVariableDeclaration/identifier[text()[1]=
                    (ancestor::contractDefinition//expression[text()[1]='.']/expression/primaryExpression/identifier)]
                    )]
                </XPath>
            </Pattern>
            <!-- Looks for construction: call unknown contract, like" address t = address(0xC0e6737A29DE7a00e2f6011924eB257106CB082f),..." in stateVariableDeclaration. -->
            <Pattern patternId ="unk102">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //stateVariableDeclaration[typeName/elementaryTypeName[text()[1]='address']]//hexNumber[string-length()=42]
                    [(ancestor::stateVariableDeclaration/identifier[text()[1]=
                    (ancestor::contractDefinition//stateVariableDeclaration[identifier[text()[1]=
                    (ancestor::contractDefinition//expression[text()[1]='.']/expression/primaryExpression/identifier)]]//functionCall/callArguments//identifier)]
                    )]
                </XPath>
            </Pattern>
            <!-- Looks for construction: call unknown contract, like" n = RPT(0xC0e6737A29DE7a00e2f6011924eB257106CB082f),..." in function. -->
            <Pattern patternId="unk103">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionDefinition//functionCall[functionName/identifier[not(matches(text()[1],"transfer"))]]//hexNumber[string-length()=42]
                    [(ancestor::expressionStatement//expression[1]//identifier[text()[1]=
                    (ancestor::contractDefinition//expressionStatement/expression[text()[1]='.']/expression/primaryExpression/identifier)]
                    )]
                </XPath>
            </Pattern>
            <!-- Looks for construction: call unknown contract, like" l = RPT(0xC0e6737A29DE7a00e2f6011924eB257106CB082f)" in fallback function. -->
            <Pattern patternId="unk104">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionFallBackDefinition//functionCall[functionName/identifier[not(matches(text()[1],"transfer"))]]//hexNumber[string-length()=42]
                    [(ancestor::expressionStatement//expression[1]//identifier[text()[1]=
                    (ancestor::contractDefinition//expressionStatement/expression[text()[1]='.']/expression/primaryExpression/identifier)]
                    )]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_gas_costly_patterns</RuleId>
        <Patterns>
            <!-- Looks for "for" cycle, which accesses contract's state variables, ".balance" or ".length" in second or third statement. -->
            <Pattern patternId="for101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //forStatement
                    [condition//expression[matches(text()[1],"^.balance$|^.length$")]
                    or expression[2]//expression[matches(text()[1],"^.balance$|^.length$")]
                    or condition//identifier[text()[1]=(ancestor::contractDefinition//stateVariableDeclaration/identifier)]
                    or condition//expression[2]//identifier[text()[1]=(ancestor::contractDefinition//stateVariableDeclaration/identifier)]
                    or condition//expression[2]//identifier
                    [text()[1]=(ancestor::functionDefinition//variableDeclaration[text()[1]="="][expression[text()[1]=".length"]]/identifier)
                    or text()[1]=(ancestor::functionDefinition//expression[text()[1]="="][expression[2][text()[1]=".length"]]/expression[1]//identifier)]
                    ]
                    [not(descendant::functionCall
                    [functionName/identifier[matches(text()[1],"transfer|withdraw")]]
                    )]
                </XPath>
            </Pattern>
            <!-- Looks for construction: "for (<counter is initialized as name.length>; <counter is bigger than anything>; ...)". -->
            <Pattern patternId="for102">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //forStatement
                    [expression[1][text()[1]="="]/expression[2][text()[1]=".length"]
                    or expression[1]/variableDeclaration[text()[1]="="]/expression[text()[1]=".length"]]
                    [condition/expression[matches(text()[1],"&gt;|&gt;=")]]
                    [not(descendant::functionCall
                    [functionName/identifier[matches(text()[1],"transfer|withdraw")]]
                    )]
                </XPath>
            </Pattern>
            <!-- Looks for "while" cycle, which condition accesses contract's state variables, ".balance" or ".length". -->
            <Pattern patternId="whi101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //whileStatement
                    [condition//expression[matches(text()[1],"^.balance$|^.length$")]
                    or condition//expression[2]//identifier[text()[1]=(ancestor::contractDefinition//stateVariableDeclaration/identifier)]
                    or condition//expression[2]//identifier
                    [text()[1]= (ancestor::functionDefinition//variableDeclaration[text()[1]="="][expression[text()[1]=".length"]]/identifier)
                    or text()[1]=(ancestor::functionDefinition//expression[text()[1]="="][expression[2][text()[1]=".length"]]/expression[1]//identifier)]
                    ]
                    [not(descendant::functionCall
                    [functionName/identifier[matches(text()[1],"transfer|withdraw")]]
                    )]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_pragmas_version</RuleId>
        <Patterns>
            <!-- Looks for pragma version, which contains '^' | '>=' | '>' | '<' | '<='. -->
            <Pattern patternId="ver101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>//pragmaDirective/pragmaSolidity//versionOperator</XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_visibility</RuleId>
        <Patterns>
            <!-- Looks for non-external funstions in an interface. -->
            <Pattern patternId="vis101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>//interfaceDefinition/contractPartDefinition/(functionDefinition|functionFallBackDefinition)/visibleType[not(matches(text()[1],"^external$"))]
                </XPath>
            </Pattern>
            <!-- Looks for  function without explicit visibility declaration. -->
            <Pattern patternId="vis102">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>//(functionDefinition|functionFallBackDefinition)[not(visibleType)]</XPath>
            </Pattern>
            <!-- Looks for  function that is neither external nor public. -->
            <Pattern patternId="vis103">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>//contractDefinition/contractPartDefinition/functionFallBackDefinition/visibleType[not(matches(text()[1],"^external|public$"))]</XPath>
            </Pattern>
            <!-- Looks for state variables without explicit visibility declaration. -->
            <Pattern patternId="vis104">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>//stateVariableDeclaration[not(visibleType)]</XPath>
            </Pattern>
            <!-- Looks for constructor with external or private visibility. -->
            <Pattern patternId="vis105">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //functionDefinition[text()[1]="constructor"][visibleType[text()[1]="external" or text()[1]="private"]]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_incorrect_use_pure</RuleId>
        <Patterns>
            <Pattern patternId="pur101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //functionDefinition[stateMutability/pureType and block/descendant-or-self::*[
                    <!--Accessing <address>.balance: using .balance-->
                    expression[matches(text()[1],".balance")]
                    <!--Accessing any of the members of block, tx, msg (with the exception of msg.sig and msg.data)-->
                    or environmentalVariable[matches(text()[1],"msg.value|msg.gas|msg.sender|block.timestamp|tx.origin|block.blockhash|block.coinbase|block.difficulty|block.gaslimit|block.number|block.blockhash|block.coinbase|tx.gasprice")]
                    <!--Using selfdestruct and it's alias suicide:-->
                    or functionCall/functionName//identifier[matches(text()[1],"^selfdestruct|suicide$")]
                    <!--Sending Ether via calls:-->
                    or functionCall/functionName//identifier[matches(text()[1],"^send|transfer$")]
                    <!--Using low-level calls:-->
                    or functionCall/functionName//identifier[matches(text()[1],"^call|delegatecall|callcode$")]
                    <!--Using inline assembly that contains certain opcodes:-->
                    or inlineAssemblyStatement
                    ]
                    ]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_incorrect_use_view</RuleId>
        <Patterns>
            <Pattern patternId="vie101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <!--Writing to state variables -->
                <!--Emitting events -->
                <!--Creating other contracts -->
                <!--Calling any function not marked view or pure:-->
                <XPath>
                    //functionDefinition[stateMutability/viewType and block/descendant-or-self::*[
                    <!--Using selfdestruct and it's alias suicide:-->
                    functionCall/functionName//identifier[matches(text()[1],"^selfdestruct|suicide$")]
                    <!--Sending Ether via calls:-->
                    or functionCall/functionName//identifier[matches(text()[1],"^send|transfer$")]
                    <!--Using low-level calls:-->
                    or functionCall/functionName//identifier[matches(text()[1],"^call|delegatecall|callcode$")]
                    <!--Using inline assembly that contains certain opcodes:-->
                    or inlineAssemblyStatement
                    ]
                    ]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_upgrade_to_new_version</RuleId>
        <Patterns>
            <!-- Looks for .call() with zero or two and more arguments. -->
            <Pattern patternId="upg101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "call"]]
                    [callArguments/tupleExpression[count(expression) != 1]]
                </XPath>
            </Pattern>
            <!-- Looks for "keccak256(...)" with more than one argument. -->
            <Pattern patternId="upg102">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //functionCall
                    [functionName/identifier[text()[1] = "keccak256"]]
                    [callArguments/tupleExpression[count(expression) > 1]]
                </XPath>
            </Pattern>
            <!-- Looks for fallback function with not external visibility. -->
            <Pattern patternId="upg103">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //functionFallBackDefinition/visibleType[text()[1] != "external"]
                </XPath>
            </Pattern>
            <!-- Looks for arrays and structures without storage declaration (storage, memory) for parameters of not external function. -->
            <Pattern patternId="upg104">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //functionDefinition
                    [not(visibleType) or visibleType[text()[1] != "external"]]
                    //parameter
                    [typeName[text()[1]="[]"]
                    or typeName/elementaryTypeName[text()[1] = "bytes"
                    or text()[1] = "string"]
                    or typeName//identifier[text()[1] = (ancestor::contractDefinition//structDefinition/identifier)]]
                    [not(storageLocation)]
                </XPath>
            </Pattern>
            <!-- Looks for arrays and structures without storage declaration (storage, memory) for local variables. -->
            <Pattern patternId="upg105">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //functionDefinition
                    //variableDeclaration
                    [typeName[text()[1]="[]"]
                    or typeName/elementaryTypeName[text()[1] = "bytes"
                    or text()[1] = "string"]
                    or typeName//identifier[text()[1] = (ancestor::contractDefinition//structDefinition/identifier)]]
                    [not(storageLocation)]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_use_inline_assembly</RuleId>
        <Patterns>
            <!-- Looks for assembly usage, except for construction: assembly { ... := extcodesize(...) }. -->
            <Pattern patternId="ass101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //statement/inlineAssemblyStatement/inlineAssemblyBlock
                    [not(assemblyItem/assemblyAssignment[assemblyExpression/assemblyCall/identifier[matches(text()[1],"^extcodesize$")]])]
                    /ancestor::inlineAssemblyStatement
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_use_var</RuleId>
        <Patterns>
            <!-- Looks for variable declaration as "var ... = <number>". -->
            <Pattern patternId="var101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>//varDeclaration[expression//primaryExpression/numberLiteral/decimalNumber[matches(text()[1],"^[0-9]+$")]]</XPath>
            </Pattern>
            <!-- Looks for variable declaration using "var". -->
            <Pattern patternId="var102">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>//varDeclaration[expression/primaryExpression/identifier]</XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_incorrect_signature</RuleId>
        <Patterns>
            <!-- Looks for "bytes4(keccak256(<signature>))" and "bytes4(sha3(<signature>))" with uint or int in <signature>. -->
            <Pattern patternId="sig101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>
                    //functionCall[callArguments//primaryExpression[contains(stringLiteral, "uint,")
                    or contains(stringLiteral, "int,") or contains(stringLiteral, "uint)") or contains(stringLiteral, "int)")
                    or contains(stringLiteral, "uint[") or contains(stringLiteral, "int[")]]
                    [callArguments/tupleExpression/expression[1][typeConversion[typeName/elementaryTypeName[text()[1]="bytes4"]]
                    [//functionCall[functionName/identifier[text()[1]="sha3" or text()[1]="keccak256"]]]]]

                </XPath>
            </Pattern>
            <Pattern patternId="sig102">
                <!-- Looks for "abi.encodeWithSignature(<signature>)" with uint or int in <signature>. -->
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>
                    //functionCall/callArguments[tupleExpression/expression[expression/primaryExpression/identifier[text()[1]="abi"]]
                    [functionCall/functionName/identifier[text()[1]="encodeWithSignature"]]
                    [functionCall//primaryExpression[contains(stringLiteral, 'uint)') or
                    contains(stringLiteral, 'int)') or contains(stringLiteral, 'uint,') or contains(stringLiteral, 'int,')
                    or contains(stringLiteral, "uint[") or contains(stringLiteral, "int[")]]
                    ]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_array_length_manipulation</RuleId>
        <Patterns>
            <!-- Looks for operations with dynamic array's length ".length": =, +=, -=, *=, /=, decrement. -->
            <Pattern patternId="alm101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //expression[expression[1][matches(text()[1],".length$")]]
                    [matches(text()[1],"^=$") or twoPlusMinusOperator/decrementOperator or lvalueOperator[mulLvalueOperator or minusLvalueOperator or plusLvalueOperator or divLvalueOperator]]
                </XPath>
            </Pattern>
            <!-- Looks for ".length++". -->
            <Pattern patternId="alm102">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //expression[expression[1][matches(text()[1],".length$")]]
                    [twoPlusMinusOperator/incrementOperator]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_strict_balance_equality</RuleId>
        <Patterns>
            <!-- Looks for strict balance comparisons: ".balance ==", ".balance !=".  -->
            <Pattern patternId="beq101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //expression
                    [comparison]
                    [expression[matches(text()[1],".balance$")]
                    or expression/tupleExpression/expression[matches(text()[1],".balance$")]
                    or expression/expression[matches(text()[1],".balance$")]]

                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_use_byte_array</RuleId>
        <Patterns>
            <!-- Looks for construction: "byte[]". -->
            <Pattern patternId="byt101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>//typeName[typeName/elementaryTypeName[text()[1]="byte"]][matches(text()[1],"^\[.*\]$")]</XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_assembly_return_in_constructor</RuleId>
        <Patterns>
            <!-- Looks for assembly { return() } in constructor. -->
            <Pattern patternId="arc101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionDefinition[text()[1]='constructor']//assemblyCall[matches(text()[1],'^return')]
                </XPath>
            </Pattern>
            <!-- Looks for assembly { return() } in old-style constructor. -->
            <Pattern patternId="arc102">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionDefinition
                    [identifier[text()[1]=(ancestor::contractDefinition/identifier)]]
                    //assemblyCall[matches(text()[1],'^return')]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_discarded_construction</RuleId>
        <Patterns>
            <!-- Looks for "suicide". -->
            <Pattern patternId="sui101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //functionCall/functionName//identifier[matches(text()[1],"suicide")] |
                    //assemblyCall/identifier[matches(text()[1],"suicide")]
                </XPath>
            </Pattern>
            <!-- Looks for "sha3". -->
            <Pattern patternId="sha102">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //functionCall/functionName//identifier[matches(text()[1],"^sha3$")] |
                    //assemblyCall/identifier[matches(text()[1],"sha3")]
                </XPath>
            </Pattern>
            <!-- Looks for "throw". -->
            <Pattern patternId="thr103">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //statement/throwRevertStatement[matches(text()[1],"throw")]
                </XPath>
            </Pattern>
            <!-- Looks for using "constant" keyword for functions. -->
            <Pattern patternId="con104">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //functionDefinition[stateMutability/constantType]
                </XPath>
            </Pattern>
            <!-- Looks for "years" multiplier. -->
            <Pattern patternId="yea105">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //numberLiteral/numberUnit[text()[1]="years"]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_use_continue</RuleId>
        <Patterns>
            <!-- Looks for "continue" inside do-while loop in files compiled with solidity 0.4 and older. -->
            <Pattern patternId="dwc101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    /sourceUnit[pragmaDirective
                    [not(//versionOperator) or //versionOperator[text()[1]="^"]]
                    [//versionLiteral[not(matches(text()[1],"\.\s*[5-9]\s*\.|^\s*[1-9]"))]]]
                    //doWhileStatement
                    [statement//continueStatement
                    [not(ancestor::forStatement[ancestor::doWhileStatement])
                    and not(ancestor::whileStatement[ancestor::doWhileStatement])]]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_returns_type</RuleId>
        <Patterns>
            <!-- Looks for functions with unnamed return parameters and without return statement. -->
            <Pattern patternId="rty101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //functionDefinition
                    [block]
                    [not(block/statement//returnStatement)]
                    [returnsParameters/parameterList/parameter[not(identifier)]]
                </XPath>
            </Pattern>
            <!-- Looks for construction: "function(...) ... returns (type name) {...}" and there are no assignment "name=" and no return. -->
            <Pattern patternId="rty102">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //functionDefinition
                    [block]
                    [not(block/statement//returnStatement)]
                    [returnsParameters/parameterList/parameter/identifier[not(text()[1]=(ancestor::functionDefinition/block//expression[matches(text()[1],"=")]/expression[1]//identifier))]]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_meaningless_msgvalue_check</RuleId>
        <Patterns>
            <!-- Looks for checks (msg.value == 0), except for those in the conctructor. -->
            <Pattern patternId="msg101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //expression
                    [expression[1]/environmentalVariable[text()[1]="msg.value"]]
                    [comparison[text()[1]="=="]]
                    [expression[2]/primaryExpression//decimalNumber[text()[1]="0"]]
                    [not(ancestor::functionDefinition[text()[1]="constructor"])]
                    [not(ancestor::functionDefinition/identifier[text()[1]=(ancestor::contractDefinition/identifier)])]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_multiple_return_values</RuleId>
        <Patterns>
            <!-- Looks for internal and private functions with more than one input parameter (Solidity version prior to 0.5.0). -->
            <Pattern patternId="res101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    /sourceUnit[not(pragmaDirective//versionLiteral[matches(text()[1],"\.[5-9]\.|^[1-9]")]
                    or pragmaDirective/pragmaExperimental//stringLiteral[text()[1]="ABIEncoderV2"])]
                    //functionDefinition[visibleType[matches(text()[1],"internal|private")]]
                    /returnsParameters/parameterList[count(parameter)>1]
                </XPath>
            </Pattern>
            <!-- Looks for functions with more than one output parameter (only in files with Solidity version 0.5.0 and newer or pragma experimental). -->
            <Pattern patternId="res102">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    /sourceUnit[pragmaDirective//versionLiteral[matches(text()[1],"\.[5-9]\.|^[1-9]")]
                    or pragmaDirective/pragmaExperimental//stringLiteral[text()[1]="ABIEncoderV2"]]
                    //functionDefinition/returnsParameters/parameterList[count(parameter)>1]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>solidity_redundant_fallback</RuleId>
        <Patterns>
            <!-- Looks for cases, when comiler's version is equal or bigger than 0.4.0, contract contains payable fallback() function with only one statement in the definition: throw or revert(). -->
            <Pattern patternId="rfk101">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //sourceUnit[pragmaDirective/pragmaSolidity/version[versionLiteral &gt;= "0.4.0"]]/contractDefinition/contractPartDefinition/functionFallBackDefinition/block[count(descendant-or-self::statement)=1]
                    [statement/throwRevertStatement]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
</Rules>

